package net.forixaim.battle_arts.mixins;

import net.forixaim.battle_arts.core_assets.animations.BattleAnimations;
import net.forixaim.battle_arts.core_assets.skills.BattleArtsSkillSlots;
import net.forixaim.battle_arts.core_assets.skills.battlestyle.BattleStyle;
import net.forixaim.battle_arts.core_assets.skills.battlestyle.legendary.LegendaryBattleStyle;
import net.minecraft.resources.ResourceKey;
import net.minecraft.tags.DamageTypeTags;
import net.minecraft.tags.TagKey;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.damagesource.DamageType;
import net.minecraft.world.damagesource.DamageTypes;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.player.Player;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.Unique;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import yesman.epicfight.world.capabilities.EpicFightCapabilities;
import yesman.epicfight.world.capabilities.entitypatch.EntityPatch;
import yesman.epicfight.world.capabilities.entitypatch.player.PlayerPatch;

@Mixin(Entity.class)
public abstract class InvulnerabilityMixin
{
	@Shadow public abstract void playerTouch(Player pPlayer);

	@Unique private Entity battle_arts$entity = (Entity) (Object)this;

	@Inject(method = "isInvulnerableTo", at = @At("HEAD"), cancellable = true)
	private void isInvulnerableTo(DamageSource pSource, CallbackInfoReturnable<Boolean> cir)
	{
		if (!pSource.typeHolder().containsTag(DamageTypeTags.BYPASSES_INVULNERABILITY))
		{
			EntityPatch<?> entityPatch = EpicFightCapabilities.getEntityPatch(battle_arts$entity, EntityPatch.class);
			if (entityPatch instanceof PlayerPatch<?> playerPatch)
			{
				if (!playerPatch.getSkill(BattleArtsSkillSlots.BATTLE_STYLE).isEmpty() && playerPatch.getSkill(BattleArtsSkillSlots.BATTLE_STYLE).getSkill() instanceof BattleStyle battleStyle)
				{
					for (ResourceKey<DamageType> damageType : battleStyle.getImmuneDamages())
					{
						if (pSource.is(damageType))
						{
							cir.setReturnValue(true);
						}
					}
					for (TagKey<DamageType> damageType : battleStyle.getImmuneModdedDamages())
					{
						if (pSource.is(damageType))
						{
							cir.setReturnValue(true);
						}
					}
					if (battleStyle instanceof LegendaryBattleStyle && (pSource.is(DamageTypes.MOB_ATTACK) || pSource.is(DamageTypes.PLAYER_ATTACK) || pSource.is(DamageTypes.ARROW) || pSource.is(DamageTypes.EXPLOSION) || pSource.is(DamageTypes.EXPLOSION) || pSource.is(DamageTypes.PLAYER_EXPLOSION) || pSource.is(DamageTypes.MAGIC) || pSource.is(DamageTypes.INDIRECT_MAGIC)))
					{
						if (playerPatch.getOriginal().getRandom().nextInt(0, 10) == 1)
						{
							playerPatch.playAnimationSynchronized(BattleAnimations.IMPERATRICE_TRAILBLAZE_SPOT, 0);
							cir.setReturnValue(true);
						}
					}
				}
			}
		}
	}
}
